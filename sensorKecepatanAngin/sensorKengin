# define windPin 2 // Receive the data from sensor
#include <SPI.h>
#include <Ethernet.h>
#include <PubSubClient.h>
#include <EthernetServer.h>
#include <EthernetClient.h>
// Constants definitions
const float pi = 3.14159265; // pi number
int period = 10000; // Measurement period (miliseconds)
int delaytime = 10000; // Time between samples (miliseconds)
int radio = 90; // Distance from center windmill to outer cup (mm)
int jml_celah = 18; // jumlah celah sensor

// Variable definitions
unsigned int Sample = 0; // Sample number
unsigned int counter = 0; // B/W counter for sensor
unsigned int RPM = 0; // Revolutions per minute
float speedwind = 0; // Wind speed (m/s)

// Update these with values suitable for your network.
byte mac[]    = {  0xDE, 0xED, 0xBA, 0xFE, 0xFE, 0xED };
IPAddress ip(192, 168, 9, 230);
IPAddress server(192, 168, 9, 221);
const char* mqtt_user = "admin";
const char* mqtt_pass= "123456";

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i=0;i<length;i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

EthernetClient ethClient;
PubSubClient client(ethClient);

void reconnect() {
  // Loop until we're reconnected
  if (Ethernet.begin(mac) == 0) {
      Serial.println("==STARTING==");
      Serial.println("Failed to configure Ethernet using DHCP");
      // no point in carrying on, so do nothing forevermore:
      // try to congifure using IP address instead of DHCP:
      Ethernet.begin(mac, ip);
  }
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect("arduinoClient6",mqtt_user, mqtt_pass)) {
      
      Serial.println("connected");
      // Once connected, publish an announcement...
      //client.publish("Arduino 1 Humidity",h);
      //client.publish("Arduino 1 Temperatur",t);

      Sample++;
      Serial.print(Sample);
      Serial.print(": Start measurementâ€¦");
      windvelocity();
      Serial.println(" finished.");
      Serial.print("Counter: ");
      Serial.print(counter);
      Serial.print("; RPM: ");
      RPMcalc();
      Serial.print(RPM);
      Serial.print("; Wind speed: ");
      WindSpeed();
      Serial.print(speedwind);
      Serial.print(" [m/s]");
      Serial.println();
      char str[100],str2[100];
      int x = (int) speedwind;
      int y = (int) RPM;
      sprintf(str, "%i", x);
      sprintf(str2, "%i", y);
      client.publish("s06ws", str);
      client.publish("s06rpm", str2);
      client.loop();
      delay(1000);
      
      // ... and resubscribe
      // client.subscribe("inTopic");
      
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(1000);
    }
  }
}

void setup()
{
// Set the pins
pinMode(2, INPUT);
digitalWrite(2, HIGH);

// sets the serial port to 9600
Serial.begin(9600);

// Splash screen
Serial.println("ANEMOMETER");
Serial.println("**********");
Serial.println("Based on depoinovasi anemometer sensor");
Serial.print("Sampling period: ");
Serial.print(period/1000);
Serial.print(" seconds every ");
Serial.print(delaytime/1000);
Serial.println(" seconds.");
Serial.println("** You could modify those values on code **");
Serial.println();
client.setServer(server, 1883);
client.setCallback(callback);

}

void loop()
{
  if (!client.connected()) {
    reconnect();
  }
}

// Measure wind speed
void windvelocity()
{
speedwind = 0;
counter = 0;
attachInterrupt(0, addcount, CHANGE);
unsigned long millis();
long startTime = millis();
while(millis() < startTime + period) {}

detachInterrupt(1);
}

void RPMcalc()
{
RPM=((counter/jml_celah)*60)/(period/1000); // Calculate revolutions per minute (RPM)
}

void WindSpeed()
{
speedwind = ((2 * pi * radio * RPM)/60) / 1000; // Calculate wind speed on m/s
}

void addcount()
{
counter++;
}
